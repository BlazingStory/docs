"use strict";(self.webpackChunkblazingstory_docs=self.webpackChunkblazingstory_docs||[]).push([[558],{4009:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"configure-arguments","title":"\u2699\ufe0f Configure arguments","description":"Configure the control type","source":"@site/docs/configure-arguments.md","sourceDirName":".","slug":"/configure-arguments","permalink":"/docs/configure-arguments","draft":false,"unlisted":false,"editUrl":"https://github.com/BlazingStory/docs/tree/main/docs/configure-arguments.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"\u2699\ufe0f Configure layouts","permalink":"/docs/configure-layouts"},"next":{"title":"\u2195\ufe0f Sorting navigation tree items","permalink":"/docs/sorting-navigation-tree-items"}}');var r=t(4848),i=t(8453);const a={},s="\u2699\ufe0f Configure arguments",c={},l=[{value:"Configure the control type",id:"configure-the-control-type",level:2},{value:"Configure the initial value of the component parameter",id:"configure-the-initial-value-of-the-component-parameter",level:2},{value:"Configure component parameters which type is <code>RenderFragment</code>",id:"configure-component-parameters-which-type-is-renderfragment",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\ufe0f-configure-arguments",children:"\u2699\ufe0f Configure arguments"})}),"\n",(0,r.jsx)(n.h2,{id:"configure-the-control-type",children:"Configure the control type"}),"\n",(0,r.jsxs)(n.p,{children:["You can configure the type of control for the component parameters via the ",(0,r.jsx)(n.code,{children:"<ArgType>"})," component inside the ",(0,r.jsx)(n.code,{children:"<Stories>"})," component. The ",(0,r.jsx)(n.code,{children:"For"})," lambda expression parameter of the ",(0,r.jsx)(n.code,{children:"<ArgType>"})," component indicates which parameters to be applied the control type configuration. And the ",(0,r.jsx)(n.code,{children:"Control"})," parameter of the ",(0,r.jsx)(n.code,{children:"<ArgType>"}),' component is used for specifying which type of control uses in the "Control" panel to input parameter value.']}),"\n",(0,r.jsxs)(n.p,{children:["For example, if you apply the ",(0,r.jsx)(n.code,{children:"ControlType.Color"})," control type to the ",(0,r.jsx)(n.code,{children:"BackgroundColor"})," parameter like this,"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<Stories TComponent="Button">\n    <ArgType For="_ => _.BackgroundColor" Control="ControlType.Color" />\n    ...\n'})}),"\n",(0,r.jsx)(n.p,{children:"you will be able to specify the component's background color with the color picker, like in the following picture."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/jsakamoto/BlazingStory/main/assets/readme-images/control-type-colorpicker.png",alt:""})}),"\n",(0,r.jsxs)(n.p,{children:['For another example, you can make the "Control" panel use dropdown list control to choose one of the values of the ',(0,r.jsx)(n.code,{children:"enum"})," type instead of the radio button group control, with the following code."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<Stories TComponent="Button">\n    ....\n    <ArgType For="_ => _.Size" Control="ControlType.Select" />\n    ...\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then, you will get the result in the following picture."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/jsakamoto/BlazingStory/main/assets/readme-images/control-type-dropdownlist.png",alt:""})}),"\n",(0,r.jsx)(n.h2,{id:"configure-the-initial-value-of-the-component-parameter",children:"Configure the initial value of the component parameter"}),"\n",(0,r.jsxs)(n.p,{children:["You can specify the initial value of the component parameter by using the ",(0,r.jsx)(n.code,{children:"<Arg>"})," component inside the ",(0,r.jsx)(n.code,{children:"<Arguments>"})," render fragment parameter of the ",(0,r.jsx)(n.code,{children:"<Story>"})," component like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'    ...\n    <Story Name="Secondary">\n        <Arguments>\n            <Arg For="_ => _.Primary" Value="false" />\n        </Arguments>\n        ...\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/jsakamoto/BlazingStory/main/assets/readme-images/configure-arguments-arg.png",alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"configure-component-parameters-which-type-is-renderfragment",children:["Configure component parameters which type is ",(0,r.jsx)(n.code,{children:"RenderFragment"})]}),"\n",(0,r.jsxs)(n.p,{children:["Blazing Story supports the ",(0,r.jsx)(n.code,{children:"RenderFragment"})," type parameter in its control panel. For example, if you have a story for a component such as having a ",(0,r.jsx)(n.code,{children:"RenderFragment ChildContent"})," parameter, you can dynamically set text to that ",(0,r.jsx)(n.code,{children:"ChildContent"})," parameter from the control panel UI at runtime."]}),"\n",(0,r.jsxs)(n.p,{children:["(NOTICE: Currently, Blazing Story allows you to set only text to the ",(0,r.jsx)(n.code,{children:"RenderFragment"})," type parameter in its control panel UI. You cannot set fragments consisting of other components or HTML tags to the ",(0,r.jsx)(n.code,{children:"RenderFragment"})," type parameter. This is a limitation of Blazing Story.)"]}),"\n",(0,r.jsxs)(n.p,{children:["However, if you mark up the ",(0,r.jsx)(n.code,{children:"ChildContent"})," parameter inside of the component's markup, you will not be able to set text to that parameter from the control panel UI. Because the ",(0,r.jsx)(n.code,{children:"ChildContent"})," parameter is already set with the component's markup."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'    ...\n    <Story Name="Default">\n\n        <Template>\n            <MyButton @attributes="context.Args">\n                \x3c!-- \u274c DON\'T DO THIS! --\x3e\n                Click me\n            </MyButton>\n        </Template>\n        ...\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Instead, you should set the ",(0,r.jsx)(n.code,{children:"ChildContent"})," parameter through the ",(0,r.jsx)(n.code,{children:"<Arguments>"})," render fragment parameter of the ",(0,r.jsx)(n.code,{children:"<Story>"})," component, like below."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'    \x3c!-- \ud83d\udc4d DO THIS! --\x3e\n    ...\n    <Story Name="Default">\n\n        <Arguments>\n            <Arg For="_ => _.ChildContent" Value="_childContent" />\n        </Arguments>\n\n        <Template>\n            <MyButton @attributes="context.Args">\n            </MyButton>\n        </Template>\n        ...\n@code\n{\n    RenderFragment _childContent = @<text>Click me</text>;\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var o=t(6540);const r={},i=o.createContext(r);function a(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);